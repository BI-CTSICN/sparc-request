-# Copyright Â© 2011 MUSC Foundation for Research Development
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

- permission = protocol_role.can_edit?
- billing_manager_count_var = protocol.billing_managers.size

.panel-group
  .panel.panel-default
    .panel-heading
      %h4.panel-title.pull-left= t(:protocol_information)[:information]
      %button.btn.btn-warning.btn-sm.pull-right.edit-protocol-information-button{ type: 'button', data: { permission: permission.to_s, protocol_id: protocol.id } } EDIT #{protocol.type.capitalize} Information
      .clearfix

    .panel-body
      = render partial: 'portal/protocols/summary', locals: { protocol: protocol }

  .panel.panel-default
    .panel-heading
      %h4.panel-title.pull-left= t(:protocol_information)[:authorized_users]
      %button.btn.btn-success.btn-sm.associated-user-button.pull-right{ type: 'button', data: { protocol_id: protocol.id, permission: permission.to_s } }
        = t(:protocol_information)[:add_authorized_user]
      .clearfix

    %table.table.table-striped
      %tr
        %th= t(:protocol_information)[:name]
        %th= t(:protocol_information)[:role]
        %th= t(:protocol_information)[:proxy]
        %th{ colspan: 2 }= t(:protocol_information)[:actions]
      - protocol.project_roles.each do |pr|
        - u = pr.identity
        %tr{ data: { 'user-id' => pr.identity.id } }
          %td
            = u.first_name
            = u.last_name
          %td= USER_ROLES.detect { |_, v| v == pr.role }.first
          %td= PROXY_RIGHTS.key(pr.project_rights)
          %td
            %button.btn.btn-warning.edit-associated-user-button{ data: { protocol_id: protocol.id, user_id: u.id, permission: permission.to_s, pr_id: pr.id } }
              %span.glyphicon.glyphicon-edit
          %td
            %button.btn.btn-danger.delete-associated-user-button{ data: { protocol_id: protocol.id, current_user_role: pr.role, pr_id: pr.id, user_id: u.id, user_role: pr.role, permission: permission.to_s } }
              %span.glyphicon.glyphicon-remove

      - if protocol.project_roles.count == 0
        = t(:protocol_information)[:no_authorized_users]

  .panel.panel-default
    .panel-heading
      %h4.panel-title.pull-left= t(:protocol_information)[:service_requests]
      - if !protocol.has_first_draft_service_request? && protocol.service_requests.present?
        %a.btn.btn-primary.btn-sm.pull-right{ role: 'button', href: "#{portal_protocol_path(protocol, format: :xlsx)}", data: { protocol_id: protocol.id } }= t(:protocol_information)[:consolidated_request]
        %button.view-full-calendar-button.btn.btn-primary.btn-sm.pull-right{ type: 'button', data: { protocol_id: protocol.id } }= t(:protocol_information)[:full_calendar]
      .clearfix
    - if protocol.has_first_draft_service_request?
      .panel-body
        .alert.alert-danger{ role: 'alert' }
          Request in progress.
    - elsif !protocol.service_requests.present?
      .panel-body
      %button.btn.btn-success.btn-sm{ type: 'button', data: { permission: permission.to_s } }= t(:protocol_information)[:add_services]
    - else
      %table.table.table-striped{ class: "#{cycle('striped')}" }
        %tr
          %th= t(:protocol_information)[:srid]
          %th= t(:protocol_information)[:date]
          %th= t(:protocol_information)[:provider]
          %th= t(:protocol_information)[:program]
          %th= t(:protocol_information)[:status]
          %th{ colspan: 4 }
            Actions:

        - protocol.service_requests.each do |sr|
          - first_ssr = true
          - sr.sub_service_requests.each do |ssr|
            - next if ssr.status == 'first_draft'
            %tr
              %td
                = pretty_ssr_id(protocol, ssr)
              %td
                = sr.submitted_at.to_date.strftime('%m/%d/%Y') rescue ''
              %td
                = ssr.organization.name
              %td
                = pretty_program_core(ssr)
              %td
                = AVAILABLE_STATUSES[ssr.status]
              %td
                %select.selectpicker.new-notification{ title: 'Send Notification To...', data: { live_search: 'true', sub_service_request_id: ssr.ssr_id,  } }
                  %optgroup{ label: 'Requester' }
                    %option{ data: { identity_id: sr.try(:service_requester).try(:id), sub_service_request_id: ssr.id, is_service_provider: 'false', current_user_id: current_user.id } }= t(:notifications)[:requester] + sr.try(:service_requester).try(:full_name)
                  %optgroup{ label: 'Associated Users' }
                    - protocol.project_roles.each do |pr|
                      %option{ data: { identity_id: pr.identity.id, sub_service_request_id: ssr.id, is_service_provider: 'false', current_user_id: current_user.id } } #{display_user_role(pr)}: #{pr.identity.full_name}
                  - unless @admin
                    %optgroup{ label: 'Service Providers' }
                      - ssr.organization.service_providers.includes(:identity).sort_by{ |sp| sp.identity.last_name }.each do |sp|
                        %option{ data: { identity_id: sp.identity.id, sub_service_request_id: ssr.id, is_service_provider: 'true', current_user_id: current_user.id } }
                          = sp.identity.full_name
              %td
                %button.view-sub-service-request-button.btn.btn-primary.btn-sm{ type: 'button', data: { service_request_id: sr.id, protocol_id: protocol.id, status: ssr.status, ssr_id: ssr.ssr_id.to_s } }
                  View SSR
              %td.edit-td
                - if @user.can_edit_sub_service_request? ssr
                  %button.edit_service_request.btn.btn-warning.btn-sm{ type: 'button', data: { permission: permission.to_s, url: "/service_requests/#{sr.id}/catalog?sub_service_request_id=#{ssr.id}&from_user_portal=true" } }
                    Edit SSR
              - if sr.sub_service_requests.size > 0 && first_ssr
                - first_ssr = false
                %td.edit-original-td
                  - if @user.can_edit_service_request? sr
                    %button.edit_service_request.btn.btn-warning.btn-sm{ type: 'button', data: { permission: permission.to_s, url: "/service_requests/#{sr.id}/catalog?from_user_portal=true&edit_original=true" } }= t(:protocol_information)[:edit_original]
      - reset_cycle('protocol')
