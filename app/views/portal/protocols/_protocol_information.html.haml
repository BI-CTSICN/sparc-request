-# Copyright Â© 2011 MUSC Foundation for Research Development
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

- permission = protocol_role.can_edit?
- pi_count_var = protocol.principal_investigators.size
- billing_manager_count_var = protocol.billing_managers.size
%input{:type => 'hidden', :value => "#{pi_count_var}", :id => "pi_count_#{protocol.id}"}
%input{:type => 'hidden', :value => "#{billing_manager_count_var}", :id => "billing_manager_count_#{protocol.id}"}

.panel-group
  .panel.panel-default
    .panel-heading
      %h4.panel-title.pull-left= t(:protocol_information)[:information]
      %button.btn.btn-warning.btn-sm.pull-right.edit-protocol-information-button{ type: 'button', data: { permission: permission.to_s, protocol_id: protocol.id } }= "EDIT #{protocol.type.capitalize} Information"
      .clearfix

    .panel-body
      %dl.dl-horizontal.pull-left
        %dt= "#{protocol.type.capitalize} ID:"
        %dd= protocol.try(:id)

        %dt= t(:protocol_information)[:title]
        %dd= protocol.try(:title)

        %dt= t(:protocol_information)[:short_title]
        %dd= protocol.try(:short_title)

        - if protocol.type == 'Study'
          %dt= t(:protocol_information)[:sponsor]
          %dd= protocol.try(:sponsor_name)

        %dt= display_funding_source_title(protocol)
        %dd= display_funding_source(protocol)

  .panel.panel-default
    .panel-heading
      %h4.panel-title.pull-left= t(:protocol_information)[:authorized_users]
      %button.btn.btn-success.btn-sm.associated-user-button.pull-right{ type: 'button', data: { protocol_id: protocol.id, permission: permission.to_s } }
        = t(:protocol_information)[:add_authorized_user]
      .clearfix

    %table.table.table-striped
      %tr
        %th= t(:protocol_information)[:name]
        %th= t(:protocol_information)[:role]
        %th= t(:protocol_information)[:proxy]
        %th{:colspan => 2}= t(:protocol_information)[:actions]
      - protocol.project_roles.each do |pr|
        - u = pr.identity
        %tr{data: {"user-id" => pr.identity.id}}
          %td
            = u.first_name
            = u.last_name
          %td= USER_ROLES.detect{|k,v| v == pr.role}.first
          %td= PROXY_RIGHTS.key(pr.project_rights)
          %td
            %button.btn.btn-warning.edit-associated-user-button
              %span.glyphicon.glyphicon-edit{ data: { protocol_id: protocol.id, user_id: u.id, permission: permission.to_s, pr_id: pr.id } }
          %td
            %button.btn.btn-danger.delete-associated-user-button
              %span.glyphicon.glyphicon-remove{ data: { protocol_id: protocol.id, current_user_role: pr.role, pr_id: pr.id, user_id: u.id, user_role: pr.role, permission: permission.to_s } }

      - if protocol.project_roles.count == 0
        = t(:protocol_information)[:no_authorized_users]

  .panel.panel-default
    .panel-heading
      %h4.panel-title.pull-left= t(:protocol_information)[:service_requests]
      %button.btn.btn-success.btn-sm.pull-right{ type: 'button', data: { permission: permission.to_s, } }= t(:protocol_information)[:add_services]
      %button.btn.btn-primary.btn-sm.pull-right{ type: 'button', data: { protocol_id: protocol.id} }= t(:protocol_information)[:full_calendar]
      %button.btn.btn-primary.btn-sm.pull-right{ type: 'button', data: { protocol_id: protocol.id} }= t(:protocol_information)[:consolidated_request]
      .clearfix

    %table.table{ class: "#{cycle('striped')}" }
      %tr
        %th= t(:protocol_information)[:srid]
        %th= t(:protocol_information)[:date]
        %th= t(:protocol_information)[:provider]
        %th= t(:protocol_information)[:program]
        %th= t(:protocol_information)[:status]
        %th{ colspan: 4 }
          Actions:

      - protocol.service_requests.each do |sr|
        - first_ssr = true
        - sr.sub_service_requests.each do |ssr|
          - next if ssr.status == 'first_draft'
          %tr
            %td
              = pretty_ssr_id(protocol, ssr)
            %td
              = sr.submitted_at.to_date.strftime('%m/%d/%Y') rescue ''
            %td
              = ssr.organization.name
            %td
              = pretty_program_core(ssr)
            %td
              = AVAILABLE_STATUSES[ssr.status]
            %td
              %button.btn.btn-primary.btn-sm{ type: 'button' }
                Send Notifications
                -# %span.glyphicon.glyphicon-envelope{ title: 'Send Notifications', data: { ssr_id: ssr.ssr_id.to_s, sr_id: sr.id } }
            %td
              %button.btn.btn-primary.btn-sm{ type: 'button' }
                View SSR
                -# %span.glyphicon.glyphicon-eye-open{ title: 'View Sub Service Request', data: { sr_id: sr.id, protocol_id: protocol.id, status: ssr.status, ssr_id: ssr.ssr_id.to_s } }
            %td.edit-td
              - if @user.can_edit_sub_service_request? ssr
                %button.btn.btn-warning.btn-sm{ type: 'button' }
                  Edit SSR
                  -# %span.glyphicon.glyphicon-pencil{ title: 'Edit Sub Service Request', data: { permission: permission.to_s } }
            - if sr.sub_service_requests.size > 0 && first_ssr
              - first_ssr = false
              %td.edit-original-td
                - if @user.can_edit_service_request? sr
                  %button.btn.btn-warning.btn-sm{ type: 'button' }
                    Edit Original
                    -# %span.glyphicon.glyphicon-pencil{ title: 'Edit Service Request', data: { permission: permission.to_s } }
          %tr
            %td{ colspan: 9 }
              %div{:style => "display:none;", :id => "portal_notifications_#{ssr.ssr_id.to_s}_#{sr.id}", :class => "portal_notifications"}
                = render :partial => 'portal/sub_service_requests/notifications_area', :locals => {:service_request => sr, :protocol => protocol, :sub_service_request => ssr}

    - reset_cycle('protocol')
