-# Copyright Â© 2011 MUSC Foundation for Research Development
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

- permission = protocol_role.can_edit?
- pi_count_var = protocol.principal_investigators.size
- billing_manager_count_var = protocol.billing_managers.size
%input{:type => 'hidden', :value => "#{pi_count_var}", :id => "pi_count_#{protocol.id}"}
%input{:type => 'hidden', :value => "#{billing_manager_count_var}", :id => "billing_manager_count_#{protocol.id}"}
.row.protocol-information-body
  .col-lg-12.h3= t(:protocol_information)[:information]
  .col-lg-4.info_left
    %ul
      %li
        = "#{protocol.type.capitalize} ID:"
        = protocol.try(:id)
      %li
        = t(:protocol_information)[:title]
        = protocol.try(:title)
      %li
        = t(:protocol_information)[:short_title]
        = protocol.try(:short_title)
      - if protocol.type == 'Study'
        %li
          = t(:protocol_information)[:sponsor]
          = protocol.try(:sponsor_name)
      %li
        = display_funding_source(protocol)
  .col-lg-4.col-lg-offset-4.protocol-information-button.ui-corner-all{:'data-permission' => permission.to_s, :'data-protocol_id' => protocol.id}
    = "EDIT #{protocol.type.capitalize} Information"

.row
  .col-lg-12.h3= t(:protocol_information)[:authorized_users]
  .col-lg-12.protocol-information-table
    %table.table.table-striped
      %tr
        %th= t(:protocol_information)[:name]
        %th= t(:protocol_information)[:role]
        %th= t(:protocol_information)[:proxy]
        %th{:colspan => 2}= t(:protocol_information)[:actions]
      - protocol.project_roles.each do |pr|
        - u = pr.identity
        %tr{data: {"user-id" => pr.identity.id}}
          %td
            = u.first_name
            = u.last_name
          %td= USER_ROLES.detect{|k,v| v == pr.role}.first
          %td= PROXY_RIGHTS.key(pr.project_rights)
          %td
            %button.button.btn-warning.edit-associated-user-button
              %span.glyphicon.glyphicon-pencil{ 'data-protocol_id' => protocol.id, 'data-user_id' => u.id, 'data-permission' => permission.to_s, 'data-pr_id' => pr.id }
          %td
            %button.button.btn-danger.delete-associated-user-button
              %span.glyphicon.glyphicon-remove{ 'data-protocol_id' => protocol.id, 'data-current_user_role' => pr.role, 'data-pr_id' => pr.id, 'data-user_id' => u.id, 'data-user_role' => pr.role, 'data-permission' => permission.to_s }

      - if protocol.project_roles.count == 0
        = t(:protocol_information)[:no_authorized_users]

.row.associated-user-button{:'data-protocol_id' => protocol.id, :'data-permission' => permission.to_s}
  = t(:protocol_information)[:add_authorized_user]

.row.service_request-body
  .col-lg-12.h3= t(:protocol_information)[:service_requests]
  .col-lg-12
    %table.table.table-striped{:style => 'font-size:12px;', :width => "845px;"}
      %tr
        %th= t(:protocol_information)[:srid]
        %th= t(:protocol_information)[:date]
        %th= t(:protocol_information)[:provider]
        %th= t(:protocol_information)[:program]
        %th= t(:protocol_information)[:status]
        %th
          Actions:

      - protocol.service_requests.each do |sr|
        - first_ssr = true
        - sr.sub_service_requests.each do |ssr|
          - next if ssr.status == 'first_draft'
          %tr
            %td
              = pretty_ssr_id(protocol, ssr)
            %td
              = sr.submitted_at.to_date.strftime('%m/%d/%Y') rescue ''
            %td
              = ssr.organization.name
            %td
              = pretty_program_core(ssr)
            %td
              = AVAILABLE_STATUSES[ssr.status]
            %td
              %select.selectpicker
                %option{ 'data-icon' => 'glyphicon-envelope' }
                  Send Notifications
                %option{ 'data-icon' => 'glyphicon-pencil', disabled: @user.can_edit_sub_service_request?(ssr) ? nil : 'disabled' }
                  Edit Sub Service Request
                %option{ 'data-icon' => 'glyphicon-pencil', disabled: (sr.sub_service_requests.size > 0 && @user.can_edit_service_request?(sr)) ? nil : 'disabled' }
                  Edit Service Request
          %tr
            %td{ colspan: 6 }
              %div{:style => "display:none;", :id => "portal_notifications_#{ssr.ssr_id.to_s}_#{sr.id}", :class => "portal_notifications"}
                = render :partial => 'portal/sub_service_requests/notifications_area', :locals => {:service_request => sr, :protocol => protocol, :sub_service_request => ssr}

    - reset_cycle('protocol')
.row
  %table
    %tr
      %td
        %a.add-services-button{:href => permission ? root_path(:protocol_id => protocol.id) : "javascript:void(0);", :'data-permission' => permission.to_s}= t(:protocol_information)[:add_services]
      %td
        %a.view-full-calendar-button{:href => "javascript:void(0);", :'data-protocol_id' => protocol.id, :'data-url' => "/portal/protocols/#{protocol.id}/view_full_calendar"}= t(:protocol_information)[:full_calendar]
      %td
        = link_to t(:protocol_information)[:consolidated_request], portal_protocol_path(protocol, format: :xlsx), class: 'consolidated_request'
