wb = xlsx_package.workbook
default = wb.styles.add_style alignment: { horizontal: :left }
row_header_style = wb.styles.add_style b: true
header_style = wb.styles.add_style sz: 12, b: true, bg_color: '0099FF', fg_color: 'FFFFFF', alignment: { horizontal: :left }
sub_header_style = wb.styles.add_style sz: 12, b: true, bg_color: 'E8E8E8', alignment: { horizontal: :left }
name_header_style = wb.styles.add_style sz: 12, b: true, bg_color: 'ADADAD', alignment: { horizontal: :left }
wb.add_worksheet(name: "Review") do |sheet|

  sheet.add_row ["#{@protocol.class.to_s} Information"], :style => header_style
  sheet.add_row ["#{@protocol.class.to_s} ID:", @protocol.id], :style => default
  sheet.add_row ['Short Title:', @protocol.short_title], :style => default
  sheet.add_row ["#{@protocol.class.to_s} Title:", @protocol.short_title], :style => default
  sheet.add_row ["Funding Source:", @protocol.display_funding_source_value], :style => default
  
  sheet.add_row

  sheet.add_row ["Authorized Users"], :style => header_style
  proxy_row = ["Name", "Role", "", "Proxy Rights"]

  has_per_patient_per_visit_services = @sub_service_request.nil? ? @service_request.has_per_patient_per_visit_services? : @sub_service_request.has_per_patient_per_visit_services?

  visit_count = 0
  if has_per_patient_per_visit_services
    @service_request.arms.each do |arm|
      visit_count = arm.visit_count unless visit_count > arm.visit_count
    end
  end

  if has_per_patient_per_visit_services
    (visit_count + 1).times do
      proxy_row << ""
    end
  end

  sheet.add_row proxy_row, :style => sub_header_style

  @protocol.project_roles.each do |pr|
    sheet.add_row [pr.identity.full_name, USER_ROLES.key(pr.role), "", PROXY_RIGHTS.key(pr.project_rights)], :style => default
  end

  sheet.add_row

  sheet.add_row ["Document Uploads"], :style => header_style

  doc_row = ["Name", "Type", "", "Institution/Provider/Program/Core"]
  if has_per_patient_per_visit_services 
    (visit_count + 1).times do
      doc_row << ""
    end
  end

  sheet.add_row doc_row, :style => sub_header_style

  @service_request.documents.group_by(&:document_grouping_id).each do |grouping_id, docs|
    next unless @sub_service_request.nil? or docs.map(&:sub_service_request_id).include?(@sub_service_request.id)
    doc = docs.first
    parents = docs.map{|d| @service_list[d.sub_service_request.organization_id][:name]}
    parents = parents.select{|name| name == @service_list[@sub_service_request.organization_id][:name]} unless @sub_service_request.nil?
    sheet.add_row [doc.document_file_name, DOCUMENT_TYPES.key(doc.doc_type), "", parents.first], :style => default
    parents.shift #remove first and iterate over remaining
    parents.each do |p|
      sheet.add_row ["", "", "", p], :style => default
    end
  end

  sheet.add_row

  merge_services_row = []
  merge_service_rows = []
  merge_sub_header_rows = []

  @service_request.arms.each do |arm|
    services_row = ["Selected Services", "", "Your Cost", "# of Subjects"]
    num_visits = arm.visit_count
    num_visits.times do |n|
      services_row << "#{arm.visit_groupings.first.visits[n].name}"
    end

    (visit_count - num_visits).times do
      services_row << ""
    end

    services_row << "Service Total"

    services_row = sheet.add_row services_row, :style => header_style

    services_sub_header_rows = []
    service_rows = []
    services_sub_header_rows << sheet.add_row([arm.name], :style => name_header_style)
    @service_request.service_list(false).each do |key, value|
      next unless @sub_service_request.nil? or @sub_service_request.organization.name == value[:process_ssr_organization_name]
      services_sub_header_rows << sheet.add_row([value[:name]], :style => sub_header_style)

      arm.visit_groupings.each do |visit_grouping|
        line_item = visit_grouping.line_item
        next unless value[:line_items].include?(line_item)
        totals_hash = visit_grouping.try(:per_subject_subtotals)
        service_row = [line_item.service.name, "", display_your_cost(line_item), visit_grouping.subject_count]

        visit_grouping.visits.each_with_index do |v, index|
          service_row << (totals_hash["#{v.id}"].nil? ? '' : v.quantity_total)
        end

        (visit_count - num_visits).times do
          service_row << ""
        end

        service_row << display_visit_based_direct_cost(visit_grouping)
        service_rows << sheet.add_row(service_row, :style => default)
      end
    end
    merge_services_row << services_row
    merge_service_rows << service_rows
    merge_sub_header_rows << services_sub_header_rows
  end
  ############ end of arms.each

  services_row = ["Selected Services", "", "Your Cost", "# of Subjects"]

  (visit_count).times do
    services_row << ""
  end

  services_row << "Service Total"

  services_row = sheet.add_row services_row, :style => header_style
  merge_services_row << services_row

  service_rows = []
  services_sub_header_rows = []
  services_sub_header_rows << sheet.add_row(['Other Services'], :style => name_header_style)
  @service_request.service_list(true).each do |key, value|
    next unless @sub_service_request.nil? or @sub_service_request.organization.name == value[:process_ssr_organization_name]
    services_sub_header_rows << sheet.add_row([value[:name]], :style => sub_header_style)

    value[:line_items].each do |line_item|
      service_row = [line_item.service.name, "", display_your_cost(line_item), ""]
     
      if has_per_patient_per_visit_services 
        visit_count.times do
          service_row << ''
        end
      end
      
      service_row << display_one_time_fee_direct_cost(line_item)
      service_rows << sheet.add_row(service_row, :style => default)
    end
  end
  merge_service_rows << service_rows
  merge_sub_header_rows << services_sub_header_rows

  sheet.add_row 

  direct_cost_total_row = has_per_patient_per_visit_services ? ["", "", "", ""] : ["", "", ""]
  
  if has_per_patient_per_visit_services 
    (visit_count - 3).times do
      direct_cost_total_row << ""
    end
  end
  
  if has_per_patient_per_visit_services
    direct_cost_total_row += ["Total Direct Cost", "", "", display_grand_total_direct_costs(@service_request, @line_items)]
  else
    direct_cost_total_row += ["Total Direct Cost", display_grand_total_direct_costs(@service_request, @line_items)]
  end

  direct_cost_total_row = sheet.add_row(direct_cost_total_row, :style => row_header_style)
  
  if USE_INDIRECT_COST
    indirect_cost_total_row = has_per_patient_per_visit_services ? ["", "", "", ""] : ["", "", ""]

    if has_per_patient_per_visit_services 
      (visit_count - 3).times do
        indirect_cost_total_row << ""
      end
    end
  
    if has_per_patient_per_visit_services
      indirect_cost_total_row += ["Total Indirect Cost", "", "", display_grand_total_indirect_costs(@service_request, @line_items)]
    else
      indirect_cost_total_row += ["Total Indirect Cost", display_grand_total_indirect_costs(@service_request, @line_items)]
    end

    indirect_cost_total_row = sheet.add_row(indirect_cost_total_row, :style => row_header_style)
  end
  
  grand_total_row = has_per_patient_per_visit_services ? ["", "", "", ""] : ["", "", ""]
  
  if has_per_patient_per_visit_services 
    (visit_count - 3).times do
      grand_total_row << ""
    end
  end

  if has_per_patient_per_visit_services
    grand_total_row += ["Grand Total", "", "", display_grand_total(@service_request, @line_items)]
  else
    grand_total_row += ["Grand Total", display_grand_total(@service_request, @line_items)]
  end

  grand_total_row = sheet.add_row(grand_total_row, :style => row_header_style)

  ###### style and merge cells ######

  end_column = "E"

  alpha_array = ("A".."Z").to_a
  additional_alpha_arrays_needed = (visit_count/26.0).ceil + 1 #add one since some columns get pushed over, safety.  doesn't matter if we have extra here

  additional_alpha_arrays = []
  additional_alpha_arrays_needed.times do |n|
    additional_alpha_arrays << alpha_array.map{|char| alpha_array[n] + char}
  end

  alpha_array = alpha_array + additional_alpha_arrays.flatten

  if has_per_patient_per_visit_services 
    end_column = alpha_array[visit_count + 4]
  end

  sheet.merge_cells("A1:#{end_column}1") #info header
  sheet.merge_cells("B2:D2") #id
  sheet["A2"].style = row_header_style
  sheet.merge_cells("B3:D3") #short title
  sheet["A3"].style = row_header_style
  sheet.merge_cells("B4:D4") #title
  sheet["A4"].style = row_header_style
  sheet.merge_cells("B5:D5") #funding source
  sheet["A5"].style = row_header_style

  sheet.merge_cells("A7:#{end_column}7") #authorized user header
  sheet.merge_cells("B8:C8") #table sub header
  last_authorized_user_row_number = 0 #store it so we know where the document uploads start
  @protocol.project_roles.size.times do |n|
    sheet.merge_cells("B#{8+n+1}:C#{8+n+1}")
    last_authorized_user_row_number = 8+n+1
  end

  document_uploads_row_number = last_authorized_user_row_number + 2 #row number for the document uploads header
  sheet.merge_cells("A#{document_uploads_row_number}:#{end_column}#{document_uploads_row_number}")

  merge_services_row.each do |services_row|
    sheet.merge_cells("A#{services_row.index+1}:B#{services_row.index+1}")
  end

  merge_sub_header_rows.each do |services_sub_header_rows|
    services_sub_header_rows.each do |sshr|
      sheet.merge_cells("A#{sshr.index+1}:#{end_column}#{sshr.index+1}") #selected services sub header row
    end
  end

  merge_service_rows.each do |service_rows|
    service_rows.each do |sr|
      sheet.merge_cells("A#{sr.index+1}:B#{sr.index+1}")
    end
  end

  ######## +4 from left and then -3 from visit count to align correctly #######
  from_left = 4
  begin_column = alpha_array[visit_count + from_left - 3]
  end_column = alpha_array[visit_count + from_left - 2]
  sheet.merge_cells("#{begin_column}#{direct_cost_total_row.index+1}:#{end_column}#{direct_cost_total_row.index+1}") if has_per_patient_per_visit_services
  sheet.merge_cells("#{begin_column}#{indirect_cost_total_row.index+1}:#{end_column}#{indirect_cost_total_row.index+1}") if has_per_patient_per_visit_services if USE_INDIRECT_COST
  sheet.merge_cells("#{begin_column}#{grand_total_row.index+1}:#{end_column}#{grand_total_row.index+1}") if has_per_patient_per_visit_services

end
