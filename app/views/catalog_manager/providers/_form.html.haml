= form_for @provider, :url => catalog_manager_provider_path, :remote => true, :id => 'entity_form' do |f|
  .errorExplanation#errorExplanation{:style => 'display:none;'}

  = hidden_field_tag 'org_unit[id]', @provider.id # added for autocomplete to use
  = hidden_field_tag 'provider[id]', @provider.id

  #entity_description
    %fieldset
      %legend Actions
      = f.submit t(:organization_form)[:submit_button], :id => 'save_button', :class => 'save_button btn provider_program_core_save'
      %img.spinner{:src => '/assets/catalog_manager/spinner_small.gif'}
    %br
  
    %fieldset
      %legend= t(:organization_form)[:gen_info]
      %table
        %tr
          %th= t(:organization_form)[:name]
          %td= f.text_field :name
        %tr
          %th= t(:organization_form)[:abbreviation]
          %td= f.text_field :abbreviation
        %tr
          %th= t(:organization_form)[:description] 
          %td= f.text_area :description, :rows => 8
        %tr
          %th= t(:organization_form)[:ack_language]
          %td= f.text_area :ack_language, :rows => 8
        %tr
          %th= t(:organization_form)[:order]
          %td= f.text_field :order
        %tr
          %th= t(:organization_form)[:is_ctrc]
          %td= f.check_box :is_ctrc
        
        - if @user.is_overlord?
          %tr
            %th= t(:organization_form)[:css_class]
            %td= f.select :css_class, ACCORDION_COLOR_OPTIONS, :include_blank => 'Select a Color'
        
        %tr
          %th= t(:organization_form)[:split_notify]
          %td= f.check_box :process_ssrs
        %tr
          %th= t(:organization_form)[:disabled]
          %td= f.check_box :is_available, {:checked => (@provider.is_available.nil? ? false : !@provider.is_available) }, false, true

    %br

    %fieldset
      %legend Status Options (Check all that apply)
      %table
        = f.fields_for :available_statuses do |as|
          %tr
            %th= as.label :status, "#{AvailableStatus::TYPES[as.object.status]}:"
            %td= as.check_box "_destroy", {:checked => !as.object.new}, false, true
            = as.hidden_field :status, :value => as.object.status

    %br

    %fieldset
      %legend= t(:organization_form)[:submission_emails]
      #se_info= render :partial => 'catalog_manager/shared/submission_emails', :locals => {:entity => @provider}

    %br

    %fieldset
      %legend= t(:organization_form)[:super_users]
      #su_info= render :partial => 'catalog_manager/shared/super_users', :locals => {:entity => @provider}

    %br

    %fieldset
      %legend= t(:organization_form)[:service_providers]
      #sp_info= render :partial => 'catalog_manager/shared/service_providers', :locals => {:entity => @provider}

    %br

    %fieldset
      %legend= t(:organization_form)[:cm_rights]
      #cm_info= render :partial => 'catalog_manager/shared/catalog_managers', :locals => {:entity => @provider}

    %br

    %fieldset
      %legend= t(:organization_form)[:auto_price_adj]
      = render :partial => 'catalog_manager/shared/increase_decrease_rates', :locals => {:entity => @provider, :can_edit_historical_data => @user.can_edit_historical_data_for?(@provider)}
    
    %br    
        
    %fieldset
      %legend= t(:organization_form)[:pricing_setup]
      %input.add_pricing_setup{:type => 'button', :value => 'Add Pricing Setup'}
      %br
      .pricing_setup_accordion
        - @provider.pricing_setups.each do |pricing_setup|
          = render :partial => 'catalog_manager/shared/pricing_setup', :locals => {:pricing_setup => pricing_setup, :pricing_setup_disabled => disable_pricing_setup(pricing_setup, @user.can_edit_historical_data_for?(@provider)), :can_edit_historical_data => @user.can_edit_historical_data_for?(@provider), :entity => @provider }

    %br        

    %fieldset
      %legend= t(:organization_form)[:subsidy_info]
      %table
        = f.fields_for :subsidy_map do |f_subsidy_map|
          %tr
            %th= t(:organization_form)[:subsidy_max_percent]
            %td= f_subsidy_map.text_field :max_percentage
          %tr
            %th= t(:organization_form)[:subsidy_max_dollar]
            %td= f_subsidy_map.text_field :max_dollar_cap
          = render 'catalog_manager/shared/excluded_funding_sources', :entity => @provider
    %br

    %fieldset
      %legend= t(:organization_form)[:actions]
      = f.submit t(:organization_form)[:submit_button], :id => 'save_button', :class => 'save_button btn provider_program_core_save'
      %img.spinner{:src => '/assets/catalog_manager/spinner_small.gif'}
      .ui-corner-all.blank_field_errors Effective Date, Display Dates, Percent of Fee, and Rates are required on all pricing setups.

.blank_pricing_setup
  = render 'catalog_manager/shared/pricing_setup', :pricing_setup_disabled => false, :can_edit_historical_data => @user.can_edit_historical_data_for?(@provider), :entity => @provider

:javascript
  $(document).ready( function() {
    Sparc.config.ready();
    Sparc.config.displayDatesForUser($('.datepicker, .disabled_datepicker'));
  })
