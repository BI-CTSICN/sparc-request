= form_for @program, :url => catalog_manager_program_path, :remote => true, :id => 'entity_form' do |f|
  .errorExplanation#errorExplanation{:style => 'display:none;'}

  = hidden_field_tag 'org_unit[id]', @program.id # added for autocomplete to use
  = hidden_field_tag 'program[id]', @program.id

  #entity_description
    %fieldset
      %legend= t("cm_shared.headers.actions")
      = f.submit t("cm_shared.headers.save"), :id => 'save_button', :class => 'btn save_button provider_program_core_save'
      %img.spinner{:src => '/assets/catalog_manager/spinner_small.gif'}

    %br

    %fieldset
      %legend= t("cm_shared.headers.general")
      %table
        %tr
          %th= t("cm_program.labels.name")
          %td= f.text_field :name
        %tr
          %th= t("cm_program.labels.abbreviation")
          %td= f.text_field :abbreviation
        %tr
          %th= t("cm_program.labels.description")
          %td= f.text_area :description, :rows => 8
        %tr
          %th= t("cm_program.labels.acknowledgment")
          %td= f.text_area :ack_language, :rows => 8
        %tr
          %th= t("cm_program.labels.order")
          %td= f.text_field :order
        %tr
          %th= t("cm_program.labels.ctrc")
          %td= f.check_box :is_ctrc
        %tr
          %th= t("cm_program.labels.split")
          %td= f.check_box :process_ssrs
        %tr
          %th= t("cm_program.labels.disabled")
          %td= f.check_box :is_available, {:checked => (@program.is_available.nil? ? false : !@program.is_available) }, false, true

    %br

    %fieldset
      %legend Status Options (Check all that apply)
      %table
        = f.fields_for :available_statuses do |as|
          %tr
            %th= as.label :status, "#{AvailableStatus::TYPES[as.object.status]}:"
            %td= as.check_box "_destroy", {:checked => !as.object.new}, false, true
            = as.hidden_field :status, :value => as.object.status    

    %br

    %fieldset
      %legend= t("cm_shared.headers.submission")
      #se_info= render :partial => 'catalog_manager/shared/submission_emails', :locals => {:entity => @program}
    
    %br
    
    %fieldset
      %legend= t("cm_shared.headers.super")
      #su_info= render :partial => 'catalog_manager/shared/super_users', :locals => {:entity => @program}
    
    %br
    
    %fieldset
      %legend= t("cm_shared.headers.service")
      #sp_info= render :partial => 'catalog_manager/shared/service_providers', :locals => {:entity => @program}
    
    %br
    
    %fieldset
      %legend= t("cm_shared.headers.catalog_rights")
      #cm_info= render :partial => 'catalog_manager/shared/catalog_managers', :locals => {:entity => @program}
    
    %br
    
    %fieldset
      %legend= t("cm_shared.headers.automatic")
      = render :partial => 'catalog_manager/shared/increase_decrease_rates', :locals => {:entity => @program, :can_edit_historical_data => @user.can_edit_historical_data_for?(@program)}
    
    %br      
    
    %fieldset
      %legend= t("cm_shared.headers.pricing")
      %input.add_pricing_setup{:type => 'button', :value => 'Add Pricing Setup'}
      %br
      .pricing_setup_accordion
        - @program.pricing_setups.each do |pricing_setup|
          = render :partial => 'catalog_manager/shared/pricing_setup', :locals => {:pricing_setup => pricing_setup, :pricing_setup_disabled => disable_pricing_setup(pricing_setup, @user.can_edit_historical_data_for?(@program)), :can_edit_historical_data => @user.can_edit_historical_data_for?(@program), :entity => @program }

    %br
    
    %fieldset
      %legend= t("cm_shared.headers.subsidy")
      %table
        = f.fields_for :subsidy_map do |f_subsidy_map|
          %tr
            %th= t("cm_shared.labels.max_percentage")
            %td= f_subsidy_map.text_field :max_percentage
          %tr
            %th= t("cm_shared.labels.max_dollar")
            %td= f_subsidy_map.text_field :max_dollar_cap
          = render 'catalog_manager/shared/excluded_funding_sources', :entity => @program
    
    %br
    
    %fieldset
      %legend= t("cm_shared.headers.actions")
      = f.submit "Save", :id => 'save_button', :class => 'save_button btn provider_program_core_save'
      %img.spinner{:src => '/assets/catalog_manager/spinner_small.gif'}
      .ui-corner-all.blank_field_errors= t("cm_shared.labels.required_list")
      
.blank_pricing_setup
  = render 'catalog_manager/shared/pricing_setup', :pricing_setup_disabled => false, :can_edit_historical_data => @user.can_edit_historical_data_for?(@program), :entity => @program

:javascript
  $(document).ready( function() {
    Sparc.config.ready();
    Sparc.config.displayDatesForUser($('.datepicker, .disabled_datepicker'));
  })
