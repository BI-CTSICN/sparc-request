# Copyright Â© 2011 MUSC Foundation for Research Development
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

def adjusted_row text, indent, direction="left"
  row = []

  if direction == 'left'
    indent.times { row << "" }
    row << text
  elsif direction == 'right'
    row << text
    indent.times { row << "" }
  end

  row
end

def smart_merge start_alpha, end_alpha, pos, sheet
  sheet.merge_cells("#{start_alpha}#{pos}:#{end_alpha}#{pos}")
end

field_replacements = {"external_subject_id" => "PARTICIPANT ID"}

visit_count = @arm.visit_count

# alpha_array used to determine column position
alpha_array = ("A".."Z").to_a
additional_alpha_arrays_needed = (visit_count/26.0).ceil + 1 #add one since some columns get pushed over, safety.  doesn't matter if we have extra here

additional_alpha_arrays = []
additional_alpha_arrays_needed.times do |n|
  additional_alpha_arrays << alpha_array.map{|char| alpha_array[n] + char}
end
 
alpha_array = alpha_array + additional_alpha_arrays.flatten

wb = xlsx_package.workbook

# define styles
styles = {} 
styles[:info_box] = wb.styles.add_style alignment: { horizontal: :center, vertical: :center}, sz: 12, b: true, bg_color: "0099FF", fg_color: "FFFFFF"
styles[:header] = wb.styles.add_style fg_color: "FFFFFF", bg_color: "0099FF", b: true, alignment: { horizontal: :left }
styles[:default] = wb.styles.add_style(:alignment => {:horizontal => :left})

wb.add_worksheet(name: "Subject report") do |sheet|
  # sctr logo
  img = Rails.root.join("app/assets/images/sctr_logo.png").to_s
  sheet.add_image(:image_src => img, :noSelect => true, :noMove => true, :hyperlink=>"http://sctr.musc.edu") do |image|
    image.width = 479
    image.height = 227
    image.hyperlink.tooltip = "Click to visit SCTR website"
    image.start_at 0, 0
  end
  
  #start text below the image
  16.times {sheet.add_row [""]}
  
  left_indent = 0

  subject_row = [@subject.label, "Status: #{@subject.status}"].join("; ")
  info_box_rows = []
  info_box_rows << sheet.add_row(adjusted_row("SPARC ID: #{@sub_service_request.display_id}", left_indent), :height => 22)
  info_box_rows << sheet.add_row(adjusted_row(subject_row, left_indent), :height => 22)
  info_box_rows << sheet.add_row(adjusted_row("PI Name: #{@protocol.primary_principal_investigator.display_name}", left_indent), :height => 22)
  info_box_rows << sheet.add_row(adjusted_row(@protocol.short_title, left_indent), :height => 22)
  info_box_rows << sheet.add_row(adjusted_row("Billing/Business Mgr: #{@protocol.billing_business_manager_email}", left_indent), :height => 22)
  info_box_rows << sheet.add_row(adjusted_row("Routing: #{@sub_service_request.routing}", left_indent), :height => 22)

  # merge info box rows and apply styling
  info_box_rows.each do |row|
    if visit_count > 1
      sheet["#{alpha_array[left_indent]}#{row.index+1}"].style = styles[:info_box]
      smart_merge alpha_array[left_indent], alpha_array[left_indent+4], row.index+1, sheet
    end
  end

  sheet.add_row [""]

  visit_completion_row = ["Visit Schedule", ""]
  visit_name_row = ["Procedure", "Service Cost"]
  procedures_rows = {}
  visit_totals = {}

  visit_only_procedures = @subject.calendar.appointments.map{|a| a.procedures.select{|x| x.service_id != nil}.map{|y| "P" + y.id.to_s}}.flatten

  completed_for = {}
  visit_only_procedures.each do |pid|
    completed_for[pid] = []
  end

  @subject.calendar.appointments.group_by{|x| x.visit_group_id ? x.visit_group_id : "#{x.name} #{x.position}"}.each do |g,appts|
    max_date = appts.map(&:completed_at).compact.max.try(:strftime, "%m/%d/%y")
    visit_completion_row << max_date || ""

    visit_name_row << appts.first.name_switch
      
    appts.each do |appt|
      appt.procedures.each do |procedure|
        sid = procedure.service ? "P" + procedure.id.to_s : "L" + procedure.line_item_id.to_s

        completed_for[sid] << g if visit_only_procedures.include?(sid)
        
        #initialize with data
        unless procedures_rows[sid]
          procedures_rows[sid] = [procedure.display_service_name, procedure.cost]
        end

        procedure_total = (appt.completed? and procedure.completed? and procedure.r_quantity) ? procedure.r_quantity * procedure.cost : nil

        visit_totals[g] ||= []
        visit_totals[g] << procedure_total

        procedures_rows[sid] << procedure_total
      end
    end

    if not (visit_only_procedures - appts.map{|a| a.procedure_ids}.flatten).empty?
      to_add = visit_only_procedures - appts.map{|a| a.procedure_ids}.flatten

      to_add.each do |pid|
        next if completed_for[pid].include? g
        procedure = Procedure.find(pid.sub("P", "").to_i)

        #initialize with data
        unless procedures_rows[pid]
          procedures_rows[pid] = [procedure.display_service_name, procedure.cost]
        end
      
        procedures_rows[pid] << nil
        completed_for[pid] << g
      end
    end
  end

  visit_name_row << "Totals"

  sheet.add_row visit_completion_row, :style => styles[:default] 
  sheet.add_row visit_name_row, :style => styles[:header] 

  procedures_rows.each do |k,v|
    name,cost = v[0..1]
    procedure_costs = v[2..v.size+1]
    
    procedure_total = ""

    if procedure_costs
      procedure_total = procedure_costs.compact.sum
    end

    v << procedure_total

    sheet.add_row v, :style => styles[:default] 
  end

  sheet.add_row [""]

  grand_total = 0
  row = ["Total/visit", ""]
  visit_totals.each do |k,v|
    visit_total = v.compact.sum
    grand_total += visit_total
  
    row << visit_total
  end

  row << grand_total
  
  sheet.add_row row, :style => styles[:default] 
    
  
#  @audit_trail.each do |audit|
#    audit.audited_changes.each do |field, values|
#      change = values
#
#      if values.is_a?(Array) 
#        from, to = values
#        next if from.blank? and to.blank? 
#        change = from.blank? ? to : "#{from} => #{to}"
#      end
#
#      row = []
#      row << audit.user.try(:full_name)
#      row << audit.created_at.strftime("%m/%d/%Y")
#      row << audit.created_at.strftime("%I:%M %P")
#      
#      if audit.auditable.respond_to? :audit_label
#        row << audit.auditable.audit_label
#      else
#        row << "#{audit.auditable_type.humanize} #{audit.auditable_id}"
#      end
#
#      row << audit.action.humanize
#
#      if field_replacements[field]
#        row << field_replacements[field]
#      else
#        row << field.humanize.upcase
#      end
#
#      row << change
#      sheet.add_row row
#    end
#  end
end
