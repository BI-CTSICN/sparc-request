def adjusted_row text, indent, direction="left"
  row = []

  if direction == 'left'
    indent.times { row << "" }
    row << text
  elsif direction == 'right'
    row << text
    indent.times { row << "" }
  end

  row
end

def smart_merge start_alpha, end_alpha, pos, sheet
  sheet.merge_cells("#{start_alpha}#{pos}:#{end_alpha}#{pos}")
end

def visit_header_row visit_names, visit_count, sheet, style
  data = ["PID", "Status"] 
  data += visit_names 
  
  (visit_count - visit_names.count).times do
    data += [' ']
  end

  data += ["Totals"]
  sheet.add_row data, :style => style
end

def subject_visit_row subjects, visit_count, sheet, styles
  subjects.each do |subject|
    styling = [nil, nil]
    (subject[:visits].count+1).times{ styling << styles[:default] }

    row = [subject[:pid], subject[:status]]
    row += subject[:visits]

    (visit_count - subject[:visits].count).times do
      row += [' ']
    end

    row += [subject[:visits].sum]
    sheet.add_row row 
    #sheet.add_row [subject[:pid], subject[:status]] + subject[:visits] + [subject[:visits].sum]       #, :style => styling
  end
end

def visit_subtotals_row arm, subjects, visit_count, sheet, styles
  totals = []
  styling = [styles[:header], nil]
  arm.visit_count.times do |index|
    totals << subjects.sum{|subject| subject[:visits][index].nil? ? 0.0 : subject[:visits][index]}
    #styling << styles[:default] # uncomment for border
  end

  padding_cells = []
  (visit_count - arm.visit_count).times do
    padding_cells << " "
  end

  sheet.add_row ["Visit Subtotals - #{arm.name}", ""] + totals + padding_cells + [totals.sum], :style => styling
  totals.sum
end

def visit_count_spanned_row header, header_style, data, data_style, visit_count, sheet, styles
  styling = [styles[header_style]]
  (visit_count+2).times do
    styling << styles[data_style]
  end
  sheet.add_row adjusted_row(header, visit_count+1, 'right') + [data], :style => styling
end

visit_count = @protocol.arms.max_by{|a| a.visit_count}.visit_count

# alpha_array used to determine column position
alpha_array = ("A".."Z").to_a
additional_alpha_arrays_needed = (visit_count/26.0).ceil + 1 #add one since some columns get pushed over, safety.  doesn't matter if we have extra here

additional_alpha_arrays = []
additional_alpha_arrays_needed.times do |n|
  additional_alpha_arrays << alpha_array.map{|char| alpha_array[n] + char}
end
 
alpha_array = alpha_array + additional_alpha_arrays.flatten

wb = xlsx_package.workbook
#wb.use_autowidth = false

# define styles
styles = {} 
styles[:info_box] = wb.styles.add_style alignment: { horizontal: :center, vertical: :center}, sz: 12, b: true, bg_color: "0099FF", fg_color: "FFFFFF"
styles[:header] = wb.styles.add_style fg_color: "FFFFFF", bg_color: "0099FF", b: true
styles[:default] = wb.styles.add_style :border => Axlsx::STYLE_THIN_BORDER

wb.add_worksheet(name: "Summary") do |sheet|
  # sctr logo
  img = Rails.root.join("app/assets/images/sctr_logo.png").to_s
  sheet.add_image(:image_src => img, :noSelect => true, :noMove => true, :hyperlink=>"http://sctr.musc.edu") do |image|
    image.width = 479
    image.height = 227
    image.hyperlink.tooltip = "Click to visit SCTR website"
    image.start_at 0, 0
  end
  
  #start text below the image
  16.times {sheet.add_row [""]}
  
  # display box in middle with project details
  # visits + 3 should be the total columns we have
  #left_indent = ((visit_count + 3)/2.0).ceil - 1
  left_indent = 2

  info_box_rows = []
  info_box_rows << sheet.add_row(adjusted_row("SPARC ID: #{@sub_service_request.display_id}", left_indent), :height => 22)
  info_box_rows << sheet.add_row(adjusted_row("PI Name: #{@protocol.primary_principal_investigator.display_name}", left_indent), :height => 22)
  info_box_rows << sheet.add_row(adjusted_row(@protocol.short_title, left_indent), :height => 22)
  info_box_rows << sheet.add_row(adjusted_row("Billing/Business Mgr: #{@protocol.billing_business_manager_email}", left_indent), :height => 22)
  info_box_rows << sheet.add_row(adjusted_row("Routing: #{@sub_service_request.routing}", left_indent), :height => 22)

  # merge info box rows and apply styling
  info_box_rows.each do |row|
    if visit_count > 1
      sheet["#{alpha_array[left_indent]}#{row.index+1}"].style = styles[:info_box]
      smart_merge alpha_array[left_indent], alpha_array[left_indent+4], row.index+1, sheet
    end
  end

  sheet.add_row [""]

  #begin displaying visit information

  #generating temporary data, this would be replaced with real data
  #visit_names = []
  #visit_count.times {|num| visit_names << "Visit #{num+1}"}

  def build_subject_data(arm, visit_count)
    subjects = []
    arm.subjects.each do |subject|
      visits = []
      subject.calendar.appointments.each do |appointment|
        subtotal = appointment.completed? ? appointment.procedures.sum{|x| x.total} : 0.00
        visits << subtotal
      end

      subjects << {:pid => subject.label, :status => subject.status, :visits => visits}
    end

    subjects
  end

  all_subjects = []
  visits_subtotal = 0

  @protocol.arms.each do |arm|
    subjects = build_subject_data(arm, visit_count)
    all_subjects << subjects

    visit_count_spanned_row arm.name, :header, nil, :header, visit_count, sheet, styles

    #visit information header
    visit_names = arm.visit_groups.map(&:name)
    visit_header_row visit_names, visit_count, sheet, styles[:header]

    #subject visit rows
    subject_visit_row subjects, visit_count, sheet, styles
    sheet.add_row [""]
    
    visits_subtotal += visit_subtotals_row arm, subjects.flatten, visit_count, sheet, styles
    sheet.add_row [""]
  end
  
  sheet.add_row [""]

  sheet.add_row [""]

  #one time fees
  sheet.add_row ["One Time Fees"], :style => styles[:header]

  otf_totals = 0
  @sub_service_request.one_time_fee_line_items.each do |otf|
    cost = otf.complete_date.nil? ? 0 : Service.cents_to_dollars(otf.direct_costs_for_one_time_fee)
    otf_totals += cost
    visit_count_spanned_row otf.service.name, nil, cost, nil, visit_count, sheet, styles
  end

  #fee subtotals
  #sheet.add_row [""]
  #visit_count_spanned_row "Fee Subtotals", :header, otf_totals, visit_count, sheet, styles
  
  #totals
  sheet.add_row [""]
  total = otf_totals + visits_subtotal 
  visit_count_spanned_row "Study Totals", :header, total, nil, visit_count, sheet, styles
  
  #payments
  sheet.add_row [""]
  visit_count_spanned_row "Payments", :header, nil, nil, visit_count, sheet, styles
  payments_total = 0
  @sub_service_request.payments.each do |payment|
    payments_total += payment.amount_received
    visit_count_spanned_row payment.date_received, nil, payment.amount_received, nil, visit_count, sheet, styles
  end
  
  #amount due
  sheet.add_row [""]
  visit_count_spanned_row "Amount Due", :header, total - payments_total, nil, visit_count, sheet, styles
  
  #date submitted
  #sheet.add_row [""]
  #visit_count_spanned_row "Date Submitted", :header, 0, visit_count, sheet, styles
  
  #amount invoiced
  #sheet.add_row [""]
  #visit_count_spanned_row "Amount Invoiced", :header, 0, visit_count, sheet, styles
  
  #amount received
  #sheet.add_row [""]
  #visit_count_spanned_row "Amount Received", :header, 0, visit_count, sheet, styles
  
  #date received
  #sheet.add_row [""]
  #visit_count_spanned_row "Date Received", :header, 0, visit_count, sheet, styles
  
end
